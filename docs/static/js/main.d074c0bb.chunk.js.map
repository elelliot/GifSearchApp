{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA0BA,OAGI,aAFA,CAEA,QAAMC,SAtBW,SAAEC,GAEnBA,EAAEC,iBAIEJ,EAAWK,OAAOC,OAAS,IAI3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAWlB,SACI,uBACIO,KAAK,OAENC,MAAST,EAERU,SAjCc,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,a,+BCTnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGDI,MAAMF,GAHL,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OACI,sBAAKc,UAAU,0CAAf,UACI,4BAAKJ,IACL,qBAAKK,IAAOf,EAAMgB,IAAQN,QCJzBO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECLwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAhBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAU,CACNf,KAAMkB,EACNL,SAAS,SAIvB,CAACpB,IAKIqB,EDpB2BK,CAAc1B,GAAnCa,EAAb,EAAQN,KAAca,EAAtB,EAAsBA,QAMtB,OACI,qCACI,oBAAIJ,UAAU,sCAAd,SAAsDhB,IAIpDoB,GAAW,mBAAGJ,UAAY,mCAAf,qBAGb,qBAAKA,UAAY,YAAjB,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADGA,EAAIC,aEoBzBgB,EAxCM,WAEjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAeA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OAEnB,aAFyB,CAExB,EAAD,CAEGA,SAAaA,GADLA,Y,MChCpC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d074c0bb.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory =  ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');//string vacío, si lo dejamos sin '', es undefined y causará errores\r\n\r\n    const handleInputChange = ( e ) => {\r\n        //console.log(e.target.value);\r\n        setInputValue (e.target.value);//obtenemos los cambios de texto con el evento\r\n    }\r\n\r\n    const handleSubmit = ( e ) =>{\r\n\r\n        e.preventDefault()//prevenimos el comportamiento por defecto que sería refrescar\r\n        // console.log('Submit Hecho')\r\n\r\n        //validamos que no haya valores nulos o que sean mínimo de 3 caracteres\r\n        if( inputValue.trim().length > 2){\r\n            \r\n            /*como no pasé las categories como argumento junto con el setCategories \r\n            llamo al callback que tiene el estado anterior, en este caso le llamo cats*/\r\n            setCategories( cats => [ inputValue, ...cats]);//insertamos primero la categoría que buscamos y despues las anteriores\r\n            setInputValue('');\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        //cuando se quiere regresar un formulario, los fragments son redundantes ya que el form agrupa o el div\r\n        //cuando aplastas enter el form se envía y se refresca por defecto\r\n        <form onSubmit = { handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n            /*el value se queda igual ya que esto se redibuja cada que toco el teclado y agarramos el valor desde el evento onChange*/\r\n               value= { inputValue }\r\n            /*Se puede mandar el primer argumento del onChange que sería el evento y lo atrapamos en la función (arriba) */\r\n                onChange = { handleInputChange /*e => console.log(e)*/ } \r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n//hacemos que el setCategories sea funcion obligatoria\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=GElegRrxuBtn3G8OLMKVk73R9BguQKlL`;\r\n    const resp= await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //si viene la imagen, que la use, pero ponemos por si acaso el \"?\"\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    // console.log(gifs);\r\n    // setImages( gifs );\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    // console.log( id, title, url  );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn \">\r\n            <p>{ title }</p>\r\n            <img src= { url } alt = { title } />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// import React from 'react'\r\n\r\n// export const GifGridItem = ( img ) => {\r\n\r\n//     console.log( img );\r\n    \r\n//     return (\r\n//         <div>\r\n//             { img.title }\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //usamos el custom hook\r\n    const { data:images , loading } = useFetchGifs( category ); //renombramos la data desestructurada\r\n\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\" animate__animated animate__fadeIn \">{ category }</h3>\r\n\r\n            {/* para no tener que poner un null si la condicion no se cumple usamos el && para solo evaluar lo primero \r\n            y no hacer nada si no se cumple */}\r\n            { loading && <p className = \"animate__animated animate__flash\">Loading</p> }\r\n            {/*  loading ? <p>Loading</p> : null */}\r\n            \r\n            <div className = \"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            { ...img } \r\n                            // img = { img } \r\n                        />\r\n                        // return <li key= { imagen.id }>{ imagen.title }</li>\r\n                    ))\r\n                    \r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n\r\n    });\r\n\r\n\r\n    useEffect( () =>{\r\n\r\n        getGifs( category )\r\n            .then( imgs =>{\r\n\r\n                setState( {\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    },[category])\r\n\r\n\r\n    \r\n\r\n    return state; //{ data: [] , loading: true }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*el use effect recibe una funcion , la que quiero ejecutar,\r\n     y gracias al arreglo de dependencias vacío solo se dispara una única vez\r\n    */\r\n    // useEffect( ()=> {\r\n    //     //solo quiero que se ejecute esta instruccion cuando el componente es renderizado por 1ra vez\r\n    //     //como cambia la categoría queremos volver a ejecutarla, entonces la ponemos dentro del argumento del array\r\n    //     getGifs( category )\r\n    //         .then( setImages ); //como tenemos una funcion cuyo primer arg es enviado como 1er arg podemos cambiar imgs => setImages( imgs ) a lo que tenemos\r\n    // }, [ category ])\r\n\r\n\r\n\r\n\r\n    // setTimeout( () => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false,\r\n    \r\n    //     })\r\n    // }, 3000);","\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Samurai X']);\r\n\r\n    // const handleAdd = () => {\r\n\r\n    //     // setCategories( 'HunterXHunter' ); esto cambia de el estado de arreglo por un string osea es incorrecto\r\n\r\n    //     //usamos spread operator para mantener las categorias ya que es const y agregamos las nuevas\r\n    //     // setCategories( [...categories, 'HunterXHunter'] );\r\n\r\n\r\n    //     //también puede tener un callback que tiene como argumento el valor del estado anterior y regresa el nuevo\r\n    //     setCategories( cats => [...cats, 'HunterXHunter'] ); \r\n    // }\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            \r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => ( // iteracion, indice (no lo pusimos)\r\n                        // return <li key={ category }> { category } </li>//estos keys suelen ser id´s de bases de datos, osea únicos\r\n                         <GifGrid \r\n                            key = { category }\r\n                            category = { category } />//no usamos el return por que solo regresa una cosa en el otro también lo podemos quitar\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp\r\n\r\n//rafcp+tab Functional Component Template","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp  />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}